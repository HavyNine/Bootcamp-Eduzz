npm init (Configurando minha aplicação)
npm install -g typescript  (Instalando denpendêcia global do typescript)
tsc --init iniciando as configurações do typescript. Basicamente são essas no final:

{
  /* Visit https://aka.ms/tsconfig.json to read more about this file */
  "compilerOptions": {
    "target": "es2019",
    "module": "commonjs",
    "moduleResolution": "node",
    "rootDir": "src",
    "typeRoots": [
      "./src/@types",
      "./node_modules/@types"
    ],
    "outDir": "./dist",
    "removeComments": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true
  }
}
npm install --save-dev typescript (Para ambiente de desenvolvimento)
npm install --save-dev @types/node
Criando Build do TSC: "build": "tsc -p ."
npm install --save express
npm install --save-dev @types/express  
npm install --save ts-node-dev
 Script para não ter que ficar dando build e node start:
 "dev": "ts-node-dev --respawn --transpile-only --ignore-watch node_modules --no-notify src/index.ts"

lembre sempre de configurar sua aplicação para entender json:
app.use(express.json()); => é um midware para interpretar o json

 Podemos separar nossa aplicação com o Router, permitindo configurações de rotas

tipos parametros para req nos protocolos http:
query params(string) ou parametros direto na url

nas rotas do express, variáveis dinâmicas na url saõ declaradas da seguinte forma:

rota.get('rota/:variavelDinamica');

dando auto complete no req.params, exemplo de código, após o Request:

    usersRouter.get('/users/:uuid', (req: Request<{uuid: string}>, res: Response, next: NextFunction) =>{
        const uuid = req.params.uuid;
        res.status(200).send({uuid});
    });

status code:
200 - ok
etc. 

ou npm install --save http-status-codes
depois import {StatuCode} from 'http-status-codes'

